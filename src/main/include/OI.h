// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef OI_H
#define OI_H

#include "frc/WPILib.h"
#include "Subsystems/Arm.h"
#include "Tools/ButtonDebouncer.h"

class OI {
private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	std::shared_ptr<frc::Joystick> arcadePanel;
	std::shared_ptr<frc::Joystick> joyR;
	std::shared_ptr<frc::Joystick> joyL;
	std::shared_ptr<frc::Joystick> xbox;
	std::shared_ptr<frc::JoystickButton> xboxB;
	std::shared_ptr<frc::JoystickButton> xboxA;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	ButtonDebouncer* _intakeLeverUp;
	ButtonDebouncer* _intakeLeverDown;

public:
	OI();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PROTOTYPES

	std::shared_ptr<frc::Joystick> getXbox();
	std::shared_ptr<frc::Joystick> getJoyL();
	std::shared_ptr<frc::Joystick> getJoyR();
	std::shared_ptr<frc::Joystick> getArcadePanel();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PROTOTYPES

	double GetLeftJoyYAxis();
	double getDeadZoneCorrected (double x);
	double getDeadZoneCorrected_XBOX(double x);
	double GetXboxTriggerLeft();
	double GetXboxTriggerRight();
	double GetXboxLeftY(bool correctedDeadzone);
	double GetXboxRightY(bool correctedDeadzone);
	int GetXboxA();
	int GetXboxB();
	int GetXboxX();
	int GetXboxY();
	int GetXboxDPad();
	int GetXboxBumpL();
	int GetXboxBumpR();
	int GetXboxBackL();
	int GetXboxStartR();
	bool GetIntakeLeverUp();
	bool GetIntakeLeverDown();
	int GetEndGameSafetySwitch();
};

typedef enum
{
	E_DPAD_NEUTRAL = -1,
	E_DPAD_UP = 0,
	E_DPAD_UP_RIGHT = 45,
	E_DPAD_RIGHT = 90,
	E_DPAD_DOWN_RIGHT = 135,
	E_DPAD_DOWN = 180,
	E_DPAD_DOWN_LEFT = 225,
	E_DPAD_LEFT = 270,
	E_DPAD_UP_LEFT = 315

} E_XBOX_DPAD_DIRECTION;


typedef enum
{
	E_XBOX_BUTTON_A = 1,
	E_XBOX_BUTTON_B = 2,
	E_XBOX_BUTTON_X = 3,
	E_XBOX_BUTTON_Y = 4,
	E_XBOX_BUTTON_BUMP_L = 5,
	E_XBOX_BUTTON_BUMP_R = 6,
	E_XBOX_BUTTON_BACK_L = 7,
	E_XBOX_BUTTON_START_R = 8,
	E_XBOX_BUTTON_LEFT_STICK = 9,
	E_XBOX_BUTTON_RIGHT_STICK = 10,

	E_XBOX_BUTTON_MAX

} E_XBOX_BUTTON;

#define XBOX_LEFT_STICK_X_AXIS 2
#define XBOX_LEFT_STICK_Y_AXIS 1
#define XBOX_RIGHT_STICK_X_AXIS 6
#define XBOX_RIGHT_STICK_Y_AXIS 5

#endif
