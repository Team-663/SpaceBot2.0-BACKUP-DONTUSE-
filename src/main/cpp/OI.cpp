// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"
#include "Subsystems/Arm.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "frc/smartdashboard/SmartDashboard.h"
#include "Commands/ArcadeMode.h"
#include "Commands/ArmManualControl.h"
#include "Commands/ArmTunePID.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/CameraIdle.h"
#include "Commands/ClawByJoystick.h"
#include "Commands/DoNothing.h"
#include "Commands/DriveByJoystick.h"
#include "Commands/DriveByXbox.h"
#include "Commands/IntakeByPID.h"
#include "Commands/LockOnAndApproachGoal.h"
#include "Commands/MoveByXbox.h"
#include "Commands/MovePID.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#define JOYSTICK_DEADZONE 0.11
#define XBOX_JOYSTICK_DEADZONE 0.12
#define JOYSTICK_POV_CENTER -1
#define JOYSTICK_POV_UP 0
#define JOYSTICK_POV_UP_RIGHT 315
#define JOYSTICK_POV_UP_LEFT 45
#define JOYSTICK_POV_DOWN 180
OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    arcadePanel.reset(new frc::Joystick(3));
    
    joyR.reset(new frc::Joystick(1));
    
    joyL.reset(new frc::Joystick(0));
    
    xbox.reset(new frc::Joystick(2));
    
    xboxB.reset(new frc::JoystickButton(xbox.get(), 1));
    xboxB->WhileHeld(new DoNothing());
    xboxA.reset(new frc::JoystickButton(xbox.get(), 1));
    xboxA->WhenPressed(new DoNothing());

    // SmartDashboard Buttons
    frc::SmartDashboard::PutData("ArmTunePID", new ArmTunePID());
    frc::SmartDashboard::PutData("IntakeByPID", new IntakeByPID());
    frc::SmartDashboard::PutData("ArmManualControl", new ArmManualControl());
    frc::SmartDashboard::PutData("LockOnAndApproachGoal", new LockOnAndApproachGoal());
    frc::SmartDashboard::PutData("ArcadeMode", new ArcadeMode());
    frc::SmartDashboard::PutData("DriveByJoystick", new DriveByJoystick());
    frc::SmartDashboard::PutData("DoNothing", new DoNothing());
    frc::SmartDashboard::PutData("DriveByXbox", new DriveByXbox());
    frc::SmartDashboard::PutData("Autonomous Command", new AutonomousCommand());
    frc::SmartDashboard::PutData("MoveByXbox", new MoveByXbox());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    _intakeLeverUp   = new ButtonDebouncer(arcadePanel, 11);
    _intakeLeverDown = new ButtonDebouncer(arcadePanel, 10);
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<frc::Joystick> OI::getXbox() {
   return xbox;
}

std::shared_ptr<frc::Joystick> OI::getJoyL() {
   return joyL;
}

std::shared_ptr<frc::Joystick> OI::getJoyR() {
   return joyR;
}

std::shared_ptr<frc::Joystick> OI::getArcadePanel() {
   return arcadePanel;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
double OI::GetLeftJoyYAxis()
{
   return joyL->GetY(frc::GenericHID::JoystickHand::kLeftHand);
}
   //Deadzone Modifier
double OI::getDeadZoneCorrected (double x){
   if (x <= double(JOYSTICK_DEADZONE) && x >= -double(JOYSTICK_DEADZONE)){
      return  0;
   }
   
   return x;
}

double OI::getDeadZoneCorrected_XBOX(double x)
{
   if (x <= double(XBOX_JOYSTICK_DEADZONE) && x >= -double(XBOX_JOYSTICK_DEADZONE)){
      return  0;
   }
   
   return x;
}

double OI::GetXboxTriggerLeft()
{
	return xbox->GetRawAxis(2);
}
double OI::GetXboxTriggerRight()
{
	return xbox->GetRawAxis(3);
}
double OI::GetXboxLeftY(bool correctDeadzone)
{
   if (correctDeadzone)
      return getDeadZoneCorrected_XBOX(xbox->GetRawAxis(1));
   else
	   return xbox->GetRawAxis(1);
}
double OI::GetXboxRightY(bool correctDeadzone)
{
	if (correctDeadzone)
      return getDeadZoneCorrected_XBOX(xbox->GetRawAxis(5));
   else
	   return xbox->GetRawAxis(5);
}

int OI::GetXboxA()
{
	return xbox->GetRawButton(1);
}
int OI::GetXboxB()
{
	return xbox->GetRawButton(2);
}
int OI::GetXboxX()
{
	return xbox->GetRawButton(3);
}
int OI::GetXboxY()
{
	return xbox->GetRawButton(4);
}

int OI::GetXboxDPad()
{
	return getXbox()->GetPOV();
}

int OI::GetXboxBumpL()
{
	return xbox->GetRawButton(E_XBOX_BUTTON_BUMP_L);
}

int OI::GetXboxBumpR()
{
	return xbox->GetRawButton(E_XBOX_BUTTON_BUMP_R);
}

int OI::GetXboxBackL()
{
	return xbox->GetRawButton(E_XBOX_BUTTON_BACK_L);
}

int OI::GetXboxStartR()
{
	return xbox->GetRawButton(E_XBOX_BUTTON_START_R);
}

bool OI::GetIntakeLeverUp()
{
   return _intakeLeverUp->Get();
}

bool OI::GetIntakeLeverDown()
{
   return _intakeLeverDown->Get();
}

