// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Commands/IntakeByPID.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

IntakeByPID::IntakeByPID(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::arm.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void IntakeByPID::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void IntakeByPID::Execute() {
    Arm::E_INTAKE_POSITION intake = Arm::E_INTAKE_INVALID;
    bool change = false;
    int dpad = Robot::oi->GetXboxDPad();
    int lBump = Robot::oi->GetXboxBumpL();
    /*
    frc::SmartDashboard::PutNumber("XBOX_DPAD", dpad);
    switch (dpad)
    {
        case E_DPAD_UP: 
            intake = Arm::E_INTAKE_UP;
            change = true;
            break;
        case E_DPAD_RIGHT:
            intake = Arm::E_INTAKE_OUT;
            change = true;
            break;
        case E_DPAD_DOWN: 
            intake = Arm::E_INTAKE_DOWN;
            change = true;
            break;
    }
*/
    intake = (Arm::E_INTAKE_POSITION)Robot::arm->GetIntakeSetting();
    if (intake != Arm::E_INTAKE_INVALID)
    {
        frc::SmartDashboard::PutNumber("IntakePIDSetting", intake);
        Robot::arm->SetIntakePIDPosition(intake);
    }

    Arm::E_ARM_POSITION arm = Arm::E_ARM_INVALID;

    arm = (Arm::E_ARM_POSITION)Robot::arm->GetArmHeightSetting();
    if (arm != Arm::E_ARM_INVALID)
    {
        Arm::E_ARM_POSITION currArm = (Arm::E_ARM_POSITION)Robot::arm->GetEnumSetPoint();
        if (!change && (currArm != arm))
            Robot::arm->SetIntakePIDPosition(Arm::E_INTAKE_DOWN);

        Robot::arm->SetArmPositionWithPID(arm);
        

    }
/*
    if (lBump)
    {
        if (Robot::oi->GetXboxA())
        {
            arm = Arm::E_ARM_DOWN;
            change = true;
        }

        if (Robot::oi->GetXboxB())
        {
            arm = Arm::E_ARM_MID_HATCH;
            change = true;
        }

        if (Robot::oi->GetXboxY())
        {
            arm = Arm::E_ARM_HIGH_HATCH;
            change = true;
        }

        if (Robot::oi->GetXboxX())
        {
            arm = Arm::E_ARM_LOAD;
            change = true;
        }
    }
    else
    {
        if (Robot::oi->GetXboxA())
        {
            arm = Arm::E_ARM_DOWN;
            change = true;
        }

        if (Robot::oi->GetXboxB())
        {
            arm = Arm::E_ARM_MID_BALL;
            change = true;
        }

        if (Robot::oi->GetXboxY())
        {
            arm = Arm::E_ARM_HIGH_BALL;
            change = true;
        }

        if (Robot::oi->GetXboxX())
        {
            arm = Arm::E_ARM_CARGO_BALL;
            change = true;
        }
    }

    if (arm != )
    {
        Robot::arm->SetArmPositionWithPID(arm);
    }
    */

    Robot::arm->SpinIntakeByXbox();
}

// Make this return true when this Command no longer needs to run execute()
bool IntakeByPID::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void IntakeByPID::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void IntakeByPID::Interrupted() {

}
