// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/Arduino.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Arduino::Arduino() : frc::Subsystem("Arduino") {
    //i2c = new frc::I2C(frc::I2C::Port::kMXP, 4);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Arduino::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Arduino::Periodic() {
    //_distSensorValue = GetDistanceSensor();
    // Update any LEDS if necessary
    //for (int i = 0; i < 5; i++){
    //if (Robot::led->DoesLEDSubsystemNeedUpdate(i)){
        
    //}
    //}
    
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

uint32_t Arduino::GetDistanceSensor()
{
  /*
  uint32_t dist = 0;
  uint8_t rc[4];
  uint8_t command = GetCommandCharFromRequest(E_REQUEST_DISTANCE_SENSOR);
  
  i2c->Transaction(&command, 1, rc, 4);
  
  dist = rc[0] | (rc[1] << 8) | (rc[2] << 16) | (rc[3] << 24);

  frc::SmartDashboard::PutNumber("I2C RC-0", rc[0]);
  frc::SmartDashboard::PutNumber("I2C RC-1", rc[1]);
  frc::SmartDashboard::PutNumber("I2C RC-2", rc[2]);
  frc::SmartDashboard::PutNumber("I2C RC-3", rc[3]);
  frc::SmartDashboard::PutNumber("DistFromArduino", dist);
  return dist;
  */
}

/*
void Arduino::SendLEDUpdate(int subsystem)
{
  
  if (subsystem >= NUM_OF_LED_SUBSYSTEMS)
    return;

  LEDSubsystem *led = Robot::led->GetLEDSubsystem(subsystem);
  uint8_t command = GetCommandCharFromRequest(E_REQUEST_LED);

  arduinoData[0] = command;
  arduinoData[1] = (unsigned char)subsystem;
	arduinoData[2] = (unsigned char)led->mode;
	arduinoData[3] = (unsigned char)led->value;

	arduinoData[4] = (unsigned char)led->color.red;
	arduinoData[5] = (unsigned char)led->color.green;
	arduinoData[6] = (unsigned char)led->color.blue;

	arduinoData[7] = (unsigned char)led->color2.red;
	arduinoData[8] = (unsigned char)led->color2.green;
	arduinoData[9] = (unsigned char)led->color2.blue;

  uint8_t rc = 0;
  i2c->Transaction(arduinoData, 10, &rc, 1);

}
*/

uint8_t Arduino::GetCommandCharFromRequest(E_ARDUINO_REQUEST_TYPE t)
{
  switch (t)
  {
    case E_REQUEST_LED: return (uint8_t)ARDUINO_LED_COMMAND;
    case E_REQUEST_DISTANCE_SENSOR: return (uint8_t)ARDUINO_DISTANCE_COMMAND;
  }
  return 0x0;

}
