// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "networktables/NetworkTableInstance.h"
#include "Subsystems/Camera.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Commands/CameraIdle.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Camera::Camera() : frc::Subsystem("Camera") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //*cameraFrame = frc::CameraServer::GetInstance()->StartAutomaticCapture(0);
    //*cameraClaw = frc::CameraServer::GetInstance()->StartAutomaticCapture(1);
    //cameraFrame->SetResolution(640,480);
    //cameraClaw->SetResolution(640,480);
    _prevButton = false;
    frc::CameraServer::GetInstance()->StartAutomaticCapture();
    
    auto inst = nt::NetworkTableInstance::GetDefault();
    auto tab = inst.GetTable("");
    auto tabJetson = inst.GetTable("Tracking");
    targetX = tab->GetEntry("ContoursX");
    targetY = tab->GetEntry("ContoursY");

    //cameraPath = tab->GetEntry("CameraSelection");
}
/*
static void VisionThread()
    {
        cs::UsbCamera camera = CameraServer::GetInstance()->StartAutomaticCapture();
        camera.SetResolution(640, 480);
        cs::CvSink cvSink = CameraServer::GetInstance()->GetVideo();
        cs::CvSource outputStreamStd = CameraServer::GetInstance()->PutVideo("Gray", 640, 480);
        cv::Mat source;
        cv::Mat output;
        while(true) {
            cvSink.GrabFrame(source);
            cvtColor(source, output, cv::COLOR_BGR2GRAY);
            outputStreamStd.PutFrame(output);
        }
    }
    void RobotInit()
    {
        std::thread visionThread(VisionThread);
        visionThread.detach();
    }
*/
void Camera::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new CameraIdle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Camera::Periodic() {
    // Put code here to be run every loop
    // DONT USE
    /*
    bool currButton = Robot::oi->getJoyL()->GetRawButton(3);
    if (currButton)
    {
        cameraPath.SetString(cameraFrame->GetName());
    } 
    else if (!currButton && _prevButton)
    {
        cameraPath.SetString(cameraClaw->GetName());
    }
    _prevButton = Robot::oi->getJoyL()->GetRawButton(3);
    */
}

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

double Camera::GetTargetXCoord()
{
    return targetX.GetDouble(0.0);
}

double Camera::GetTargetYCoord()
{
    return targetY.GetDouble(0.0);
}